# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RegionGrower
                                 A QGIS plugin
 Grows Regions
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-07-04
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Greg Oakes
        email                : gro3@aber.ac.uk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QFileInfo
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.gui import QgsMapToolEmitPoint, QgsMapTool, QgsMapCanvas,QgsMessageBar,QgsMapToolPan

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .region_grow_dialog import RegionGrowerDialog
import os.path
from PyQt5.QtGui import *
from PyQt5.QtWidgets import QFileDialog, QApplication
from PyQt5.QtCore import Qt, pyqtSignal, QVariant
from qgis.core import *
from qgis.core import QgsMessageLog,Qgis
from qgis.core import QgsRasterLayer,QgsVectorLayer,QgsFeature
from qgis.core import QgsProject,QgsVectorFileWriter,QgsCoordinateReferenceSystem,QgsSpatialIndex
import qgis.utils
from qgis.utils import iface

import processing
import numpy as np
import osgeo
from osgeo import gdal
import math
from math import sqrt
from math import ceil
import scipy
from scipy import spatial
import glob
from osgeo import osr
from gdal import ogr
import shutil
import sys
import math
import zipfile
import glob
import time


def getRGB(x,y,imageArray):

    listBands = [0,1,2]
    listCol = []
    for band in listBands:
        value = imageArray[x,y,band]
        print(value)
        listCol.append(value)

    return listCol

def getLab(colorBand3):
    #### Using D65 White Reference ####

    #### Xr = 95.047
    #### Yr 100
    #### Zr 108.883

    listBands = [0,1,2]
    vBand = []
    for band in listBands:
        #colour band is a np array of colour values
        colorBand = colorBand3[:,:,band]

        colorBand = np.divide(colorBand,255)

        print(colorBand.shape)



        v = np.where(colorBand>0.04045,np.power(np.divide(np.add(colorBand, 0.055), 1.055), 2.4),np.divide(colorBand,12.92))
        v = np.multiply(v,100)
        vBand.append(v)




    X = np.add(np.add(np.multiply(vBand[0],0.4124),np.multiply(vBand[1], 0.3576)),np.multiply(vBand[2],0.1805))

    Y = np.add(np.add(np.multiply(vBand[0],0.2126),np.multiply(vBand[1],0.7152)),np.multiply(vBand[2],0.0722))

    Z = np.add(np.add(np.multiply(vBand[0],0.0193),np.multiply(vBand[1],0.1192)),np.multiply(vBand[2],0.9505))

    print(X[0][0])
    print(Y[0][0])
    print(Z[0][0])

    Xr = 95.047
    Yr = 100
    Zr = 108.883



    xr = np.divide(X,Xr)
    yr = np.divide(Y,Yr)
    zr = np.divide(Z,Zr)

    e= 0.008856
    k = 903.3

    fx = np.where(xr>e,np.cbrt(xr),((np.multiply(xr,k))+16)/116)
    fy = np.where(yr>e,np.cbrt(yr),((np.multiply(yr,k))+16)/116)
    fz= np.where(zr>e,np.cbrt(zr),((np.multiply(zr,k))+16)/116)

    L = np.subtract(np.multiply(fy,116),16)

    a = np.multiply(np.subtract(fx,fy),500)

    b = np.multiply(np.subtract(fy,fz),200)


    LAB = np.stack([L,a,b],axis = 2)

    return LAB

def GenerateNeighbourhood(colourImage,neighbourhood,kxy):

        if neighbourhood> kxy[1]:
            difference = neighbourhood-kxy[1]

            candiatePixels = colourImage[(kxy[1] - kxy[1]):(kxy[1] + (neighbourhood)),
                             (kxy[0] - neighbourhood):(kxy[0] + (neighbourhood)), :]

        else:

            candiatePixels = colourImage[(kxy[1]-neighbourhood):(kxy[1]+(neighbourhood)),(kxy[0]-neighbourhood):(kxy[0]+(neighbourhood)),:]

        return candiatePixels

def world2Pixel(geoMatrix,x,y):

    ulX = geoMatrix[0]
    uLy = geoMatrix[3]
    xDist = geoMatrix[1]
    yDist = geoMatrix[5]
    pixel = int((x-ulX)/xDist)
    line=int((y-uLy)/yDist)
    return pixel, line

def pixel2World(geoMatrix,x,y):
    ulX = geoMatrix[0]
    uLy = geoMatrix[3]
    xDist = geoMatrix[1]
    yDist = geoMatrix[5]
    coorX = (ulX+(x*xDist))
    coorY = (uLy+(y*yDist))
    return(coorX,coorY)

def array2raster(newRasterfn,rasterOrigin,pixelWidth,pixelHeight,array,espgCode):

    cols = array.shape[1]
    rows = array.shape[0]
    originX = rasterOrigin[0]
    originY = rasterOrigin[1]

    driver = gdal.GetDriverByName('GTIFF')
    outRaster = driver.Create(newRasterfn, cols, rows, 1, gdal.GDT_Byte)
    outRaster.SetGeoTransform((originX, pixelWidth, 0, originY, 0, pixelHeight))
    outband = outRaster.GetRasterBand(1)
    outband.WriteArray(array)
    outRasterSRS = osr.SpatialReference()
    outRasterSRS.ImportFromEPSG(int(espgCode))
    outRaster.SetProjection(outRasterSRS.ExportToWkt())
    outband.FlushCache()

def processes(image, location, neighbourhood, threshold, outVec, scratch,workspace,espgCode):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        print("Processing...")
        print(outVec)
        kxyMap = location
        file = image
        # print(file)
        src = gdal.Open(file)
        geoTrans = src.GetGeoTransform()
        src = None
        kxy = world2Pixel(geoTrans, kxyMap[0], kxyMap[1])
        # print(kxy)
        pxlNeighbourhood = int(neighbourhood / geoTrans[1])
        if pxlNeighbourhood > kxy[1]:
            print("Will Fall Edge..")
            for i in range(1, neighbourhood + 1):
                value = int(i / geoTrans[1])
                if value < kxy[1]:
                    pxlNeighbourhood = value
        # print(pxlNeighbourhood)
        originTop = (kxy[1] - pxlNeighbourhood)
        # print(originTop)
        originLeft = kxy[0] - pxlNeighbourhood
        rasterorigin = pixel2World(geoTrans, originLeft, originTop)
        src = None
        bands = []
        for x in range(1, 4):
            ds = gdal.Open(file)
            bandArray = np.array(ds.GetRasterBand(x).ReadAsArray())
            bands.append(bandArray)
            ds = None

        color_image = np.stack(bands, axis=2)

        # color_image = getLab(color_image)

        candiatePixels = GenerateNeighbourhood(color_image, pxlNeighbourhood, kxy)

        # candiatePixels = getLab(candiatePixels)

        # print(candiatePixels.shape)
        # print(pxlNeighbourhood)
        candiatePixelsLen = len(candiatePixels[0])
        spatialCentre = candiatePixelsLen / 2

        #### There is now a centroid pixel kxy and a neghbourhood of pixels around the centroid from whcih candiates will be selected ####

        #### There will now be a spatial and spectral distance calculation made and a total distance calculation found ####

        #### plot k centroid in 3 dimensional colour space ####

        kCentroidColour = getRGB(kxy[1], kxy[0], color_image)

        colorDist = np.empty_like(candiatePixels)
        colorDist = colorDist[:, :, 0]
        spatialDist = np.empty_like(candiatePixels)
        spatialDist = spatialDist[:, :, 0]

        DistMap = np.empty_like(candiatePixels)
        DistMap = DistMap[:, :, 0]

        spatialDist = np.indices(spatialDist.shape)
        coGrid = np.stack(spatialDist)
        yCo = coGrid[0, :, :]
        xCo = coGrid[1, :, :]
        spatialMap = np.empty_like(candiatePixels)
        spatialMap = spatialMap[:, :, 0]
        var1 = np.subtract(spatialCentre, xCo)
        var2 = np.subtract(spatialCentre, yCo)
        power1 = np.power(var1, 2)
        power2 = np.power(var2, 2)
        length = np.add(power1, power2)
        spatialDist = np.sqrt(length)

        candiatePixelsRed = candiatePixels[:, :, 0]

        var1 = np.subtract(kCentroidColour[0], candiatePixels[:, :, 0])

        var2 = np.subtract(kCentroidColour[1], candiatePixels[:, :, 1])
        var3 = np.subtract(kCentroidColour[2], candiatePixels[:, :, 2])
        #### I now have 2 distances which can be added together to generate a total image where spectral distance or spatial distance can be weighted ####
        power1 = np.power(var1, 2)
        power2 = np.power(var2, 2)
        power3 = np.power(var3, 2)

        length = np.add(power1, np.add(power2, power3))

        colorDist = np.sqrt(length)



        totalDistanceGrid = np.add(np.sqrt(spatialDist), colorDist)
        # totalDistanceGrid = colorDist

        binaryGrid = np.where(totalDistanceGrid > threshold, np.nan, 1)

        outRast = '{0}TempRast.tif'.format(scratch)
        tmpVec = '{0}TempVec.shp'.format(scratch)

        src = gdal.Open(file)
        # print(src)
        geoTrans = src.GetGeoTransform()
        rtnX = geoTrans[1]
        rtnY = geoTrans[5]
        src = None
        array2raster(outRast, rasterorigin, rtnX, rtnY, binaryGrid,espgCode)

        rastLayer = QgsRasterLayer(outRast)

        provider = rastLayer.dataProvider()

        provider.setNoDataValue(1, 0)

        rastLayer.triggerRepaint()

        xmin = location[0] - 1
        xmax = location[0] + 1

        ymin = location[1] - 1
        ymax = location[1] + 1

        tL = QgsPointXY(xmin, ymin)
        bR = QgsPointXY(xmax, ymax)

        rec = QgsRectangle(tL, bR)

        processing.run("gdal:polygonize", {'INPUT': rastLayer, 'BAND': 1, 'FIELD': 'DN', 'EIGHT_CONNECTEDNESS': False,
                                           'OUTPUT': tmpVec})

        processingVec = tmpVec

        processingVecInt = tmpVec.replace('.shp', '_int.shp')


        layer = QgsVectorLayer(tmpVec,"tmp Layer",'ogr')

        with edit(layer):
            # build a request to filter the features based on an attribute
            request = QgsFeatureRequest().setFilterExpression('"DN" != 1')

            # we don't need attributes or geometry, skip them to minimize overhead.
            # these lines are not strictly required but improve performance
            request.setSubsetOfAttributes([])
            request.setFlags(QgsFeatureRequest.NoGeometry)

            # loop over the features and delete
            for f in layer.getFeatures(request):
                layer.deleteFeature(f.id())

        # QgsProject.instance().addMapLayer(layer)s
        provider = layer.dataProvider()

        spIndex = QgsSpatialIndex()  # create spatial index object

        feat = QgsFeature()
        fit = provider.getFeatures()  # gets all features in layer

        # insert features to index
        while fit.nextFeature(feat):
            spIndex.insertFeature(feat)

        pt = QgsPointXY(location[0], location[1])

        # QgsSpatialIndex.nearestNeighbor (QgsPoint point, int neighbors)
        nearestIds = spIndex.intersects(rec)  # we need only one neighbour

        featureId = nearestIds[0]
        fit2 = layer.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
        print(fit2)
        ftr = QgsFeature()
        print(ftr)

        layer.select(featureId)

        print("Write Vector")
        print("ESPG Code: {0}".format(espgCode))

        QgsVectorFileWriter.writeAsVectorFormat(layer, processingVecInt, 'System', QgsCoordinateReferenceSystem(espgCode),
                                                'ESRI Shapefile', bool(True))

        # tLayer = QgsVectorLayer(processingVecInt)
        # QgsProject.instance().addMapLayer(tLayer)
        #

        tLayer = QgsVectorLayer(processingVecInt)
        processingVecIntBuff = processingVecInt.replace('.shp','_Buff.shp')


        processing.run("native:buffer",
                       {'INPUT': tLayer, 'DISTANCE': 0.1,
                        'SEGMENTS': 5, 'END_CAP_STYLE': 0, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'DISSOLVE': True,
                        'OUTPUT': processingVecIntBuff})


        # reply = QMessageBox.question(self.iface.mainWindow(), 'Continue?',
        #                              'Do you want to digitise this feature?', QMessageBox.Yes, QMessageBox.No)

        print("Write Merged Vector")
        print("ESPG Code: {0}".format(espgCode))
        print('EPSG: {0}'.format(espgCode))
        processing.run("native:mergevectorlayers",
                       {'LAYERS': [processingVecIntBuff, outVec], 'CRS': QgsCoordinateReferenceSystem('EPSG: {0}'.format(espgCode)),
                        'OUTPUT': outVec})

        layer = None
        layer = QgsVectorLayer(outVec)
        outVecJS = outVec.replace(".shp","")
        QgsVectorFileWriter.writeAsVectorFormat(layer, outVecJS, "utf-8", driverName="GeoJSON")

        layers = iface.mapCanvas().layers()
        activeLayer = iface.activeLayer()
        if activeLayer.type() == QgsMapLayer.VectorLayer:
            QgsProject.instance().removeMapLayers( [activeLayer.id()] )


        vLayer = QgsVectorLayer(outVec)
        vLayer.renderer().symbol().setColor(QColor("blue"))
        vLayer.triggerRepaint()
        QgsProject.instance().addMapLayer(vLayer)




        shutil.rmtree(scratch)

        print("Complete")

        QApplication.restoreOverrideCursor()

def convert_wgs_to_utm(lon, lat):
    global espgCode
    utm_band = str((math.floor((lon + 180) / 6 ) % 60) + 1)
    if len(utm_band) == 1:
        utm_band = '0'+utm_band
    if lat >= 0:
        espgCode = '326' + utm_band
    else:
        espgCode = '327' + utm_band
    return espgCode

def gdalSave(refimg,outarray,outputfile,form):

    ds = gdal.Open(refimg)
    refArray = (np.array(ds.GetRasterBand(1).ReadAsArray()))
    refimg = ds
    arrayshape = refArray.shape
    x_pixels = arrayshape[1]
    y_pixels = arrayshape[0]
    print(x_pixels,y_pixels)
    print(outarray.shape)
    GeoT = refimg.GetGeoTransform()

    Projection = osr.SpatialReference()
    Projection.ImportFromWkt(refimg.GetProjectionRef())
    driver = gdal.GetDriverByName(form)
    dataset = driver.Create(outputfile, x_pixels, y_pixels, 1, gdal.GDT_Float32)
    dataset.SetGeoTransform(GeoT)
    dataset.SetProjection(Projection.ExportToWkt())
    dataset.GetRasterBand(1).WriteArray(outarray)
    dataset.FlushCache()

def resample(imageFileName,espgCode):

    resolution = 500

    #### Get Image Parameters ####
    bands = [0,1,2]

    # Get Resolution

    rasterMultiBand = gdal.Open(imageFileName)
    geoTrans = rasterMultiBand.GetGeoTransform()
    pixelSize = geoTrans[1]
    cols = rasterMultiBand.RasterXSize
    rows = rasterMultiBand.RasterYSize

    # resolution = cols

    if cols < resolution:

        # Resample to 50 wide

        newMulti = cols/resolution

        newRes = newMulti*pixelSize

    if rows < resolution:
        newMulti = rows/ resolution

        newRes = newMulti * pixelSize
    else:


        size = [cols,rows]

        greatest = size[-1]

        newMulti = greatest/ resolution

        newRes = newMulti * pixelSize

    print(newRes)
    outRes = imageFileName.replace('.tif','_Re.tif')
    print(outRes )
    processing.run("gdal:warpreproject", {
        'INPUT': imageFileName,
        'SOURCE_CRS': None, 'TARGET_CRS': espgCode, 'RESAMPLING': 0, 'NODATA': None,
        'TARGET_RESOLUTION': newRes, 'OPTIONS': '', 'DATA_TYPE': 0, 'TARGET_EXTENT': None,
        'TARGET_EXTENT_CRS': None, 'MULTITHREADING': False, 'EXTRA': '', 'OUTPUT': outRes})

    outWGS84 = outRes.replace('.tif','_WGS.tif')

    processing.run("gdal:warpreproject", {
        'INPUT': outRes,'SOURCE_CRS': espgCode, 'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:4326'), 'RESAMPLING': 0, 'NODATA': None,
        'TARGET_RESOLUTION': None, 'OPTIONS': '', 'DATA_TYPE': 0, 'TARGET_EXTENT': None, 'TARGET_EXTENT_CRS': None,
        'MULTITHREADING': False, 'EXTRA': '', 'OUTPUT': outWGS84})

    outRes = outWGS84
    print(imageFileName)

    return outRes

    #### Read each raster band as an QgsRasterLayer ####



    #for bandImg in bands:

        #### Read Img for Resample ####

def zipdir(path, ziph):
    # ziph is zipfile handle
    for root, dirs, files in os.walk(path):
        for file in files:
            ziph.write(os.path.join(root, file))

def createDS(ds_name, ds_format, geom_type, srs, overwrite=False):
    drv = ogr.GetDriverByName(ds_format)
    if os.path.exists(ds_name) and overwrite is True:
        deleteDS(ds_name)
    ds = drv.CreateDataSource(ds_name)
    lyr_name = os.path.splitext(os.path.basename(ds_name))[0]
    lyr = ds.CreateLayer(lyr_name, srs, geom_type)
    return ds, lyr

def dissolve(input, output, multipoly=False, overwrite=False):
    ds = ogr.Open(input)
    lyr = ds.GetLayer()
    out_ds, out_lyr = createDS(output, ds.GetDriver().GetName(), lyr.GetGeomType(), lyr.GetSpatialRef(),
                               overwrite)
    defn = out_lyr.GetLayerDefn()
    multi = ogr.Geometry(ogr.wkbMultiPolygon)
    for feat in lyr:
        if feat.geometry():
            feat.geometry().CloseRings()  # this copies the first point to the end
            wkt = feat.geometry().ExportToWkt()
            multi.AddGeometryDirectly(ogr.CreateGeometryFromWkt(wkt))
    union = multi.UnionCascaded()
    if multipoly is False:
        for geom in union:
            poly = ogr.CreateGeometryFromWkb(geom.ExportToWkb())
            feat = ogr.Feature(defn)
            feat.SetGeometry(poly)
            out_lyr.CreateFeature(feat)
    else:
        out_feat = ogr.Feature(defn)
        out_feat.SetGeometry(union)
        out_lyr.CreateFeature(out_feat)
        out_ds.Destroy()
    ds.Destroy()
    return True


class NewMapTool(QgsMapToolEmitPoint):

    # Define the custom signal this map tool will have
    # Always needs to be implemented as a class attributes like this
    canvasClicked = pyqtSignal(float,float)

    def __init__(self, canvas):
        QgsMapTool.__init__(self, iface.mapCanvas())


    def canvasReleaseEvent(self, event):
        point_canvas_crs = event.mapPoint()
        print(point_canvas_crs)
        iface.messageBar().pushMessage("Region Grower Plugin", "Process Starting", level=Qgis.Info,
                                       duration=2)
        # you need to specifically emit the right signal signature
        self.canvasClicked[float,float].emit(point_canvas_crs.x(),point_canvas_crs.y())


class RegionGrower:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RegionGrower_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Region Grower')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RegionGrower', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/region_grow/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'RegionGrow'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Region Grow'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # self.iface.mapCanvas().setMapTool(PointTool)


        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RegionGrowerDialog()


        # show the dialog
        self.dlg.show()



        #### The Script Starts, Now we need the mouse click operations ####

        self.dlg.nbhood.setText("25")
        self.dlg.thresh.setText("15")

        self.dlg.fileFind.clicked.connect(self.getFile)

        self.dlg.start.clicked.connect(self.start)

        self.dlg.finish.clicked.connect(self.finish)

        self.dlg.undo.clicked.connect(self.undo)

        self.dlg.shpFind.clicked.connect(self.getShp)

        self.dlg.resume.clicked.connect(self.start)

        self.dlg.pause.clicked.connect(self.pause)

        self.dlg.exec_()

    def getFile(self):

        qfd =QFileDialog()
        title = 'Open File'
        path = '~/Documents/'
        f = QFileDialog.getOpenFileName(qfd,title,path)[0]
        QgsMessageLog.logMessage(f)
        print(f)
        self.dlg.fileDisplay.setText(f)
        return f

    def getShp(self):

        qfd =QFileDialog()
        title = 'Open Existing Shapefile'
        path = '~/Documents/'
        f = QFileDialog.getOpenFileName(qfd,title,path)[0]
        QgsMessageLog.logMessage(f)
        print(f)
        self.dlg.fileShp.setText(f)
        return f

    def setFile(self):
        qfd = QFileDialog()
        title = 'Save File'
        path = '~/Documents/'
        f = QFileDialog.getOpenFileName(qfd, title, path)[0]
        QgsMessageLog.logMessage(f)
        print(f)
        self.dlg.outVec.setText(f)
        return f

    def finish(self):

        #### Copy outVec GeoJson for ZZap ###

        imageName = self.dlg.fileDisplay.text()
        saveFile = self.dlg.outVec.text()

        filename = imageName.split('/')[-1]
        outDir = imageName.replace(filename,'')

        scratchPath = imageName.replace(filename, '')
        scratch = scratchPath
        scratch = '{0}tmp/'.format(scratch)

        outputDir = imageName.replace(filename, '')
        outputDir = '{0}ProcessedFiles/'.format(outputDir)

        workspacePath = imageName.replace(filename, '')
        workspace = workspacePath
        workspace = '{0}Workspace/'.format(workspace)

        if os.path.isdir(scratch) == False:
            os.mkdir(scratch)

        if os.path.isdir(outputDir) == True:
            shutil.rmtree(outputDir)
            os.mkdir(outputDir)
        else:
            os.mkdir(outputDir)

        print(imageName)

        if self.dlg.trainingData.isChecked() == False:

                ds = gdal.Open(imageName)
                dsarray = np.array(ds.GetRasterBand(1).ReadAsArray())
                corarray = np.where(dsarray>0,1,0)

                outFile = scratch+"BinImg.tif"
                gdalSave(imageName,corarray,outFile,"GTIFF")

                ds = None
                dsarray = None
                rastImg = QgsRasterLayer(outFile)

                outVec =  scratch+"ScanExtent.shp"

                processing.run("gdal:polygonize", {'INPUT': rastImg, 'BAND': 1, 'FIELD': 'DN', 'EIGHT_CONNECTEDNESS': False,
                                                   'OUTPUT': outVec})

                extentVecLyr = QgsVectorLayer(outVec)

                outVec = outVec.replace('.shp','_Simp.shp')

                processing.run("native:simplifygeometries",
                               {'INPUT': extentVecLyr, 'METHOD': 0,
                                'TOLERANCE': 1, 'OUTPUT': outVec})

                extentVecLyr = None

                layer = QgsVectorLayer(outVec,"Extent Layer",'ogr')

                with edit(layer):
                    # build a request to filter the features based on an attribute
                    request = QgsFeatureRequest().setFilterExpression('"DN" != 1')

                    # we don't need attributes or geometry, skip them to minimize overhead.
                    # these lines are not strictly required but improve performance
                    request.setSubsetOfAttributes([])
                    request.setFlags(QgsFeatureRequest.NoGeometry)

                    # loop over the features and delete
                    for f in layer.getFeatures(request):
                        layer.deleteFeature(f.id())

                #### CLean the polygon to remove holes ####
                outVecClean = outVec.replace('.shp', '_Clean.shp')
                processing.run("native:deleteholes", {
                    'INPUT': outVec,
                    'MIN_AREA': 5000, 'OUTPUT': outVecClean})

                outVecCleanDiss = outVec.replace('.shp', '_Diss.shp')
                processing.run("native:dissolve",
                               {'INPUT': outVecClean,
                                'FIELD': [], 'OUTPUT': outVecCleanDiss})



                #### Should be a dataset where there is only the scanned area ####

                outputGridfn = scratch + 'Extent_Grid.shp'

                ext = rastImg.extent()

                xmin = ext.xMinimum()
                xmax = ext.xMaximum()
                ymin = ext.yMinimum()
                ymax = ext.yMaximum()

                # convert sys.argv to float
                xmin = float(xmin)
                xmax = float(xmax)
                ymin = float(ymin)
                ymax = float(ymax)
                gridWidth = float(100)
                gridHeight = float(100)

                # get rows
                rows = ceil((ymax - ymin) / gridHeight)
                print(rows)
                # get columns
                cols = ceil((xmax - xmin) / gridWidth)
                print(cols)
                # start grid cell envelope
                ringXleftOrigin = xmin
                ringXrightOrigin = xmin + gridWidth
                ringYtopOrigin = ymax
                ringYbottomOrigin = ymax - gridHeight

                # create output file

                print(espgCode)

                outDriver = ogr.GetDriverByName('ESRI Shapefile')
                if os.path.exists(outputGridfn):
                    os.remove(outputGridfn)
                srs = osr.SpatialReference()
                srs.ImportFromEPSG(int(espgCode))

                outDataSource = outDriver.CreateDataSource(outputGridfn)
                outLayer = outDataSource.CreateLayer(outputGridfn, srs, geom_type=ogr.wkbPolygon)
                print(outLayer)
                featureDefn = outLayer.GetLayerDefn()

                # create grid cells
                countcols = 0
                while countcols < cols:
                    countcols += 1

                    # reset envelope for rows
                    ringYtop = ringYtopOrigin
                    ringYbottom = ringYbottomOrigin
                    countrows = 0

                    while countrows < rows:
                        countrows += 1
                        ring = ogr.Geometry(ogr.wkbLinearRing)
                        ring.AddPoint(ringXleftOrigin, ringYtop)
                        ring.AddPoint(ringXrightOrigin, ringYtop)
                        ring.AddPoint(ringXrightOrigin, ringYbottom)
                        ring.AddPoint(ringXleftOrigin, ringYbottom)
                        ring.AddPoint(ringXleftOrigin, ringYtop)
                        poly = ogr.Geometry(ogr.wkbPolygon)
                        poly.AddGeometry(ring)

                        # add new geom to layer
                        outFeature = ogr.Feature(featureDefn)
                        outFeature.SetGeometry(poly)
                        outLayer.CreateFeature(outFeature)
                        outFeature.Destroy

                        # new envelope for next poly
                        ringYtop = ringYtop - gridHeight
                        ringYbottom = ringYbottom - gridHeight

                    # new envelope for next poly
                    ringXleftOrigin = ringXleftOrigin + gridWidth
                    ringXrightOrigin = ringXrightOrigin + gridWidth

                # Close DataSources
                outDataSource.Destroy()


                #### Perform a check... if extent centroid location is within scanned extent then keep, else del ####


                gridOut = scratch+'Grid_Out.shp'
                processing.run("native:extractbylocation",
                               {'INPUT': outputGridfn,
                                'PREDICATE': [0, 1, 5, 6],
                                'INTERSECT': outVecCleanDiss,
                                'OUTPUT': gridOut})

                gridOutDiss = gridOut.replace('.shp', '_Diss.shp')
                processing.run("native:dissolve",
                               {'INPUT': gridOut,
                                'FIELD': [], 'OUTPUT': gridOutDiss})

                gridOutDissSimp = gridOutDiss.replace('.shp','_Simp.shp')
                processing.run("native:simplifygeometries",
                               {'INPUT':gridOutDiss, 'METHOD': 0,
                                'TOLERANCE': 10, 'OUTPUT': gridOutDissSimp})

                outVecJSCleanCor = gridOutDissSimp

                #### Add New Field to the Scan Extent WGS Data Layer ####

                fLayer = QgsVectorLayer(outVecJSCleanCor)

                fLayer.dataProvider().deleteAttributes([0])
                fLayer.updateFields()


                layer_provider=fLayer.dataProvider()
                layer_provider.addAttributes([QgsField("type",QVariant.String)])
                fLayer.updateFields()

                layer_provider=fLayer.dataProvider()
                layer_provider.addAttributes([QgsField("label",QVariant.String)])
                fLayer.updateFields()

                fLayer.startEditing()
                for feature in fLayer.getFeatures():
                    id = feature.id()
                    idx = fLayer.fields().names().index("type")
                    attr_value = {idx:'bbox'}
                    layer_provider.changeAttributeValues({id:attr_value})
                fLayer.commitChanges()

                outVecJSCleanLabel = outVecJSCleanCor.replace(".shp","_Labelled.shp")

                # outImgJSVec = outImgJSVec.replace(scratch,outputDir)

                QgsVectorFileWriter.writeAsVectorFormat(fLayer,outVecJSCleanLabel, 'System',
                                                        QgsCoordinateReferenceSystem(4326),
                                                        'ESRI Shapefile')

                #### Merge the Water Bodies to the Scan Extent Dataset ####

                # Bounding Box is outVecJSCleanLabel
                # Water Sources is GeoJsonShp = outDir+saveFile + '.geojson'

                #### Take the Processed File, get each feature in it, buffer it by 15m and then subset the Survey image to this extent ####

                #### Save this to an output directory ####

                #### Simplify Polygons ####


                if self.dlg.fileShp.text() == '':
                    saveFile = self.dlg.outVec.text()
                    inputVec = outDir + saveFile + '.shp'
                else:
                    inputVec = self.dlg.fileShp.text()
                    print("Resuming")


                # inputVec = outDir+saveFile+'.shp'
                outputVec = inputVec
                processing.run("native:simplifygeometries",
                               {'INPUT': inputVec, 'METHOD': 0,
                                'TOLERANCE': 1.5, 'OUTPUT': inputVec})

                outShp = inputVec

                output = outShp.replace('.shp','_Merge.shp')

                vecCount = QgsVectorLayer(inputVec,'Data',"ogr")

                featCount = 0
                for feat in vecCount.getFeatures():
                    featCount +=1

                print(featCount)


                if featCount > 1:
                    if self.dlg.trainingData.isChecked() == False:
                        dissolve(outShp,output,False,False)
                else:
                    dissolve(outShp,output,True,False)



                outShp = output

                print(outShp)
                shpLayer = QgsVectorLayer(outShp,outShp,"ogr")
                print(espgCode)

                crs = shpLayer.crs()
                crs.createFromId(int(espgCode))
                shpLayer.setCrs(crs)

                print("CRS_Set")

                #### Check if there is an output directoru for the subset images ####

                subImgDir = 'Sub-Imgs/'
                subImgPath = outputDir+subImgDir
                if os.path.isdir(subImgPath) == False:
                    os.mkdir(subImgPath)

                print(shpLayer)

                #### Delete Old Fields ####


                shpLayer.dataProvider().deleteAttributes([0,1,2])
                shpLayer.updateFields()

                #### Add New Field to the ShpFile ####


                layer_provider=shpLayer.dataProvider()
                layer_provider.addAttributes([QgsField("type",QVariant.String)])
                shpLayer.updateFields()

                layer_provider = shpLayer.dataProvider()
                layer_provider.addAttributes([QgsField("label", QVariant.String)])
                shpLayer.updateFields()



                shpLayer.startEditing()
                counter = 0
                for feature in shpLayer.getFeatures():
                    counter +=1
                    print(counter)
                    print(feature)
                    print("Enter Loop")


                    #### Get Bounding Box of each individual Feature ####

                    print(feature.geometry().boundingBox())
                    Bb = feature.geometry().boundingBox()
                    xmin = Bb.xMinimum()
                    xmax = Bb.xMaximum()
                    ymin = Bb.yMinimum()
                    ymax = Bb.yMaximum()

                    print(xmin,xmax)

                    buff = feature.geometry().buffer(5, 1)
                    print(buff)
                    print("Buffering")

                    buffLyr = QgsVectorLayer("Polygon?crs=EPSG:4326", "bufffer", "memory")

                    print(buffLyr)
                    crs = buffLyr.crs()
                    crs.createFromId(int(espgCode))
                    buffLyr.setCrs(crs)
                    pr = buffLyr.dataProvider()
                    b = QgsFeature()
                    b.setGeometry(buff)
                    pr.addFeature(b)
                    buffLyr.updateExtents()
                    # QgsProject.instance().addMapLayers([buffLyr])

                    #### Get Feature Bounds Exact to Export ####

                    fOut = feature.geometry()
                    fOutLyr = QgsVectorLayer("Polygon?crs=EPSG:4326", "bufffer", "memory")

                    crs = fOutLyr.crs()
                    crs.createFromId(int(espgCode))
                    fOutLyr.setCrs(crs)
                    pr = fOutLyr.dataProvider()
                    f = QgsFeature()
                    f.setGeometry(fOut)
                    pr.addFeature(f)
                    fOutLyr.updateExtents()

                    tmpVecFile = subImgPath+"tempFeatVec.geojson"

                    QgsVectorFileWriter.writeAsVectorFormat(fOutLyr,tmpVecFile, "UTF-8", QgsCoordinateReferenceSystem(4326),
                                                            "GEOJSON")

                    #### Get the centroid location of the polygon and use a subset of this as the Unique ID, along with an int val at the end ####
                    pt = feature.geometry().centroid().asPoint()
                    print(pt)
                    x = str(pt.x())
                    print(x)
                    y = str(pt.y())
                    print(y)
                    xSub = x.split('.')[0]
                    print(xSub)
                    ySub = y.split('.')[0]
                    print(ySub)

                    #### Delete Non Needed Properties ####

                    #### Add Attributes ####


                    id = feature.id()
                    # idx = fLayer.fields().names().index("type")
                    print(idx)
                    attr_value = {0:'source'}
                    layer_provider.changeAttributeValues({id:attr_value})

                    id = feature.id()
                    # idx = fLayer.fields().names().index("label")
                    print(idx)
                    attr_value = {1: "WaterBodyImg_{0}-{1}_{2}_BB".format(xSub,ySub,feature.id())}
                    layer_provider.changeAttributeValues({id: attr_value})



                    outputFile = subImgPath + "WaterBodyImg_{0}-{1}_{2}_BB.tif".format(xSub,ySub,feature.id())
                    print(outputFile)


                    #### Need to difference xMin, xMax then yMax, yMin ####

                    #### need to find the greatest difference ####

                    #### Subtract differences, get that, divide by 2. add and subtract from the smaller difference poinst then its a square ####

                    xDifference = xmax-xmin

                    yDifference = ymax-ymin

                    greatestDiff = sorted([xDifference,yDifference])[-1]

                    lowestDiff = sorted([xDifference,yDifference])[0]

                    print(greatestDiff)

                    changeDiff = greatestDiff-lowestDiff

                    if xDifference > yDifference:

                        #### chnage ¥ ####

                        ymax = ymax+changeDiff/2
                        ymin = ymin-changeDiff/2

                    else:

                        xmax=xmax+changeDiff/2
                        xmin=xmin-changeDiff/2

                    processing.run("gdal:cliprasterbyextent",
                                   {'INPUT': imageName,
                                    'PROJWIN': '{0},{1},{2},{3}'.format(xmin-10,xmax+10,ymin-10,ymax+10),
                                    'NODATA': None, 'OPTIONS': 'COMPRESS=DEFLATE|PREDICTOR=2|ZLEVEL=9', 'DATA_TYPE': 1, 'OUTPUT': outputFile})



                    #### Take the Polygon of the water Body. Convert to line feature. Buffer. Rasterise. Add to bands so that r = 255, g = 0, b= 0. this wil hten be passed to resample etc ...


                    ## Save WaterBOdy Feature to Temp Vec File ##



                    tmpLineFile = subImgPath+"tempLineFile.geojson"

                    processing.run("native:polygonstolines", {
                        'INPUT': tmpVecFile,
                        'OUTPUT': tmpLineFile})

                    tmpBuffVec = subImgPath+"Temp_buffer.geojson"

                    processing.run("native:buffer", {
                        'INPUT': tmpLineFile,
                        'DISTANCE': 0.00000301802, 'SEGMENTS': 5, 'END_CAP_STYLE': 0, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2,
                        'DISSOLVE': False, 'OUTPUT': tmpBuffVec})

                    polygonRast = subImgPath+'tmpPolygonRast.tif'


                    rasterMultiBand = gdal.Open(outputFile)
                    geoTrans = rasterMultiBand.GetGeoTransform()
                    pixelSize = geoTrans[1]
                    print(pixelSize)

                    tmpBuffVecReproj = subImgPath+ 'tmpBuffVecReproj.geojson'

                    processing.run("native:reprojectlayer", {
                        'INPUT': tmpBuffVec,
                        'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:{0}'.format(espgCode)), 'OUTPUT': tmpBuffVecReproj })

                    processing.run("gdal:rasterize", {'INPUT':tmpBuffVecReproj,'FIELD':None,'BURN':255,'UNITS':1,'WIDTH':pixelSize,'HEIGHT':pixelSize,'EXTENT':'{0},{1},{2},{3} [EPSG:{4}]'.format(xmin-10,xmax+10,ymin-10,ymax+10,espgCode),'NODATA':0,'OPTIONS':'','DATA_TYPE':5,'INIT':None,'INVERT':False,'OUTPUT':polygonRast})



                    ## Load Clipped Raster Data as arays ##

                    ds = gdal.Open(outputFile)
                    redReadArray = (np.array(ds.GetRasterBand(1).ReadAsArray()))
                    ds = None

                    ds = gdal.Open(outputFile)
                    greenReadArray = (np.array(ds.GetRasterBand(2).ReadAsArray()))
                    ds = None

                    ds = gdal.Open(outputFile)
                    blueReadArray = (np.array(ds.GetRasterBand(3).ReadAsArray()))
                    ds = None

                    ## Read Poly Rast

                    ds = gdal.Open(polygonRast)
                    polyReadArray = (np.array(ds.GetRasterBand(1).ReadAsArray()))
                    ds = None

                    corRedBand = np.where(polyReadArray==255,255,redReadArray)
                    corGreenBand = np.where(polyReadArray==255,0,greenReadArray)
                    corBlueBand = np.where(polyReadArray==255,0,blueReadArray)

                    listOutArray = [corRedBand,corGreenBand,corBlueBand]

                    correctedClipped = subImgPath+'CorrectedClipped.tif'

                    ds = gdal.Open(outputFile)
                    refArray = (np.array(ds.GetRasterBand(1).ReadAsArray()))
                    refimg = ds
                    arrayshape = refArray.shape
                    x_pixels = arrayshape[1]
                    y_pixels = arrayshape[0]
                    print(x_pixels, y_pixels)
                    GeoT = refimg.GetGeoTransform()
                    Projection = osr.SpatialReference()
                    Projection.ImportFromWkt(refimg.GetProjectionRef())
                    driver = gdal.GetDriverByName('GTIFF')
                    numBands = len(listOutArray)
                    print(numBands)
                    dataset = driver.Create(correctedClipped, x_pixels, y_pixels, numBands, gdal.GDT_Float32)
                    dataset.SetGeoTransform(GeoT)
                    dataset.SetProjection(Projection.ExportToWkt())
                    counter = 1
                    for array in listOutArray:
                        dataset.GetRasterBand(counter).WriteArray(array)
                        counter += 1
                    dataset.FlushCache()
                    dataset=None
                    ds = None
                    refImg = None


                    # outputFile = subImgPath + "WaterBodyImg_{0}-{1}_{2}_Buff.tif".format(xSub, ySub, feature.id())
                    # print(outputFile)

                    # processing.run("gdal:cliprasterbymasklayer",
                    #                {'INPUT': imageName,
                    #                 'MASK': buffLyr, 'SOURCE_CRS': int(espgCode),
                    #                 'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:4326'), 'NODATA': -9999,
                    #                 'ALPHA_BAND': False, 'CROP_TO_CUTLINE': True, 'KEEP_RESOLUTION': False,
                    #                 'SET_RESOLUTION': False, 'X_RESOLUTION': None, 'Y_RESOLUTION': None,
                    #                 'MULTITHREADING': False, 'OPTIONS': '', 'DATA_TYPE': 0,
                    #                 'OUTPUT': outputFile})

                    print("Clip")

                    #### Zip the File ####

                    zipPWD = os.getcwd()
                    os.chdir(subImgPath)

                    print(espgCode)
                    ReProjImg = resample(correctedClipped,espgCode)
                    print("Resampled:")
                    print(ReProjImg)

                    outJPEG = subImgPath + "WaterBodyImg_{0}-{1}_{2}_BB.jpg".format(xSub,ySub,feature.id())

                    #### Convert to jpg ####

                    processing.run("gdal:translate", {
                        'INPUT': ReProjImg,
                        'TARGET_CRS': None, 'NODATA': None, 'COPY_SUBDATASETS': False,
                        'OPTIONS': 'COMPRESS=DEFLATE|PREDICTOR=2|ZLEVEL=9', 'DATA_TYPE': 1,
                        'OUTPUT': outJPEG})

                    os.remove(outputFile)
                    os.remove(tmpVecFile)
                    os.remove(tmpLineFile)
                    os.remove(polygonRast)
                    os.remove(tmpBuffVec)
                    os.remove(tmpBuffVecReproj)

                    del redReadArray
                    del greenReadArray
                    del blueReadArray
                    del corRedBand
                    del corGreenBand
                    del corBlueBand
                    del listOutArray

                    # options_list = [
                    #     '-ot Byte',
                    #     '-of JPEG'
                    # ]
                    # options_string = " ".join(options_list)
                    #
                    # osgeo.gdal.Translate(outJPEG,clippedImg, options=options_string)

                    listTif = glob.glob("*.tif")
                    for tif in listTif:
                        os.remove(tif)

                    listXml = glob.glob("*.xml")
                    for xml in listXml:
                        os.remove(xml)
                    os.chdir(zipPWD)




                shpLayerLabelled = outShp.replace(".shp","_Sources.geojson")

                QgsVectorFileWriter.writeAsVectorFormat(shpLayer, shpLayerLabelled, 'System',
                                                        QgsCoordinateReferenceSystem(4326),
                                                        'GEOJSON')


                print("Clip Has Been Completed...")


                outShp = shpLayerLabelled


                print(outShp)
                print(outVecJSCleanLabel)

                outMerged = outShp.replace('_Sources.geojson','_Extent-Sources.geojson')

                processing.run("native:mergevectorlayers", {
                    'LAYERS': [outVecJSCleanLabel,outShp,],'CRS': QgsCoordinateReferenceSystem('EPSG:4326'), 'OUTPUT': outMerged})

                outMergedSingle = outMerged.replace(".geojson", "_Single.geojson")

                processing.run("native:multiparttosingleparts",
                               {'INPUT': outMerged,
                                'OUTPUT': outMergedSingle})


                mergedLyr = QgsVectorLayer(outMergedSingle)
                mergedLyr.dataProvider().deleteAttributes([2, 3])
                mergedLyr.updateFields()

                mergedLyrSingleTmp = outputDir+saveFile+'_Extent-SourcesTmp.geojson'
                QgsVectorFileWriter.writeAsVectorFormat(mergedLyr, mergedLyrSingleTmp, 'System',
                                                        QgsCoordinateReferenceSystem(4326),
                                                        'GEOJSON')

                mergedLyrSingle = outputDir + saveFile + '_Extent-Sources.geojson'
                processing.run("native:snappointstogrid", {
                    'INPUT': mergedLyrSingleTmp,
                    'HSPACING': 1e-06, 'VSPACING': 1e-06, 'ZSPACING': 0, 'MSPACING': 0,
                    'OUTPUT': mergedLyrSingle})

                os.remove(mergedLyrSingleTmp)

                # shutil.move(outMergedSingle, outputDir)

                pwd = os.getcwd()
                os.chdir(outputDir)
                zipf = zipfile.ZipFile('SubImg.zip', 'w', zipfile.ZIP_DEFLATED)
                zipdir('Sub-Imgs/', zipf)
                zipf.close()
                os.chdir(pwd)



                if os.path.isdir(workspace) == True:
                    shutil.rmtree(workspace)

                if os.path.isdir(scratch) == True:
                    shutil.rmtree(scratch)
                    print()


                listremFiles = glob.glob('{0}*'.format(saveFile))

                for file in listremFiles:
                    try:
                        os.remove(file)
                    except:
                        print()

                # src = gdal.Open(imageName)
                # ulx, xres, xskew, uly, yskew, yres = src.GetGeoTransform()
                # Cx = ulx + ((src.RasterXSize / 2) * xres)
                # Cy = uly + ((src.RasterYSize / 2) * yres)
                # print(Cx)
                # print(Cy)
                # espgCode = convert_wgs_to_utm(Cx, Cy)
                # print(espgCode)
                # src = None

                #QgsVectorFileWriter.writeAsVectorFormat(shpLayer, outKML, "utf-8", driverName= "KML")


                print(os.getcwd())

                rmFile = glob.glob("*UTM.tif")
                print(rmFile)
                for file in rmFile:
                    os.remove(file)

                rmFile = glob.glob("*.geojson")
                print(rmFile)
                for file in rmFile:
                    os.remove(file)

        else:


            print()

            if os.path.isdir(workspace) == True:
                shutil.rmtree(workspace)

            if os.path.isdir(scratch) == True:
                shutil.rmtree(scratch)
                print()


        self.dlg.start.setEnabled(True)
        self.dlg.resume.setEnabled(True)
        self.dlg.fileDisplay.setText('')
        self.dlg.nbhood.setText('')
        self.dlg.thresh.setText('')
        self.dlg.outVec.setText('')

        iface.actionPan().trigger()

        self.dlg.close()

        # QApplication.quit()

    def undo(self):

        imageName = self.dlg.fileDisplay.text()
        saveFile = self.dlg.outVec.text()


        filename = imageName.split('/')[-1]

        outDir = imageName.replace(filename, '')

        outShp = outDir + saveFile + '.shp'

        undoLyr = QgsVectorLayer(outShp)

        listFtrs = []

        for ftr in undoLyr.getFeatures():
            listFtrs.append(ftr.id())


        with edit(undoLyr):

            listFtrs.sort(reverse=True)
            print(listFtrs)
            ftrID = listFtrs[-1]
            print(ftrID)
            undoLyr.dataProvider().deleteFeatures([ftrID, ftrID])

        print(listFtrs)

        layers = iface.mapCanvas().layers()
        activeLayer = iface.activeLayer()
        if activeLayer.type() == QgsMapLayer.VectorLayer:
            QgsProject.instance().removeMapLayers([activeLayer.id()])

        undoLyr.renderer().symbol().setColor(QColor("blue"))
        undoLyr.triggerRepaint()
        QgsProject.instance().addMapLayer(undoLyr)

    def start(self,firstRun):

        self.dlg.start.setEnabled(False)
        self.dlg.resume.setEnabled(False)

        iface.messageBar().pushMessage("Region Grower Plugin", "Preparing Datasets...", level=Qgis.Info,
                                       duration=10)

        imageName = self.dlg.fileDisplay.text()
        neighbourhood = self.dlg.nbhood.text()
        threshold = self.dlg.thresh.text()

        saveFile = self.dlg.outVec.text()

        filename = imageName.split('/')[-1]
        outDir = imageName.replace(filename,'')


        #### Get ESPGCODE for UTM ####

        rasterLyr = QgsRasterLayer(imageName,"Data")
        rasterLyr.isValid()
        print(rasterLyr.crs().authid())
        crs = rasterLyr.crs().authid().split(':')[1]
        print(crs)
        print(type(crs))
        if crs.startswith('32'):

            QgsProject.instance().addMapLayer(rasterLyr)
            global espgCode
            espgCode = crs
        else:
            #### Get UTM zone ####

            src = gdal.Open(imageName)
            ulx, xres, xskew, uly, yskew, yres = src.GetGeoTransform()
            Cx = ulx + ((src.RasterXSize/2) * xres)
            Cy = uly + ((src.RasterYSize/2) * yres)
            print(Cx)
            print(Cy)

            espgCode = convert_wgs_to_utm(Cx, Cy)

            print(espgCode)
            src= None

            self.dlg.fileDisplay.setText(imageName.replace('.tif','_UTM.tif'))
            print("Incorrect CRS")
            print("Warping")
            processing.run("gdal:warpreproject",
                           {'INPUT': rasterLyr, 'SOURCE_CRS': None,
                            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:{0}'.format(espgCode)), 'RESAMPLING': 0, 'NODATA': None,
                            'TARGET_RESOLUTION': None, 'OPTIONS': '', 'DATA_TYPE': 0, 'TARGET_EXTENT': None,
                            'TARGET_EXTENT_CRS': None, 'MULTITHREADING': False, 'EXTRA': '',
                            'OUTPUT': imageName.replace('.tif','_UTM.tif')})
            rasterLyr = None
            imageName = imageName.replace('.tif','_UTM.tif')
            rasterLyr = QgsRasterLayer(imageName,"Data")
            QgsProject.instance().addMapLayer(rasterLyr)
            print(firstRun)

        if self.dlg.fileShp.text() != '':
            resVecF = self.dlg.fileShp.text()
            resVec = QgsVectorLayer(resVecF)
            QgsProject.instance().addMapLayer(resVec)




        #### One time convert the image from 3 band rgb to 3band lab ####

        filename = imageName.split('/')[-1]

        workspacePath = imageName.replace(filename, '')
        workspace = workspacePath
        workspace = '{0}Workspace/'.format(workspace)

        if os.path.isdir(workspace) == False:

            os.mkdir(workspace)



        outputfileName = '{0}{1}'.format(workspace,filename.replace('.tif','_LAB.tif'))


        bands =[]
        for x in range(1, 4):
            ds = gdal.Open(imageName)
            bandArray = np.array(ds.GetRasterBand(x).ReadAsArray())
            bands.append(bandArray)
            ds = None

        color_image = np.stack(bands, axis=2)
        color_image = getLab(color_image)

        #### Gdal Save to Image _lab.tif ####

        ds = gdal.Open(imageName)
        refArray = (np.array(ds.GetRasterBand(1).ReadAsArray()))
        refimg = ds
        arrayshape = refArray.shape
        x_pixels = arrayshape[1]
        y_pixels = arrayshape[0]
        GeoT = refimg.GetGeoTransform()

        Projection = osr.SpatialReference()
        Projection.ImportFromWkt(refimg.GetProjectionRef())
        driver = gdal.GetDriverByName('GTIFF')
        dataset = driver.Create(outputfileName, x_pixels, y_pixels, 3, gdal.GDT_Float32)
        dataset.SetGeoTransform(GeoT)
        dataset.SetProjection(Projection.ExportToWkt())

        for i in range(0,3):
            dataset.GetRasterBand(i+1).WriteArray(color_image[:, :, i])

        ds = None
        dataset.FlushCache()

        self.point_tool = NewMapTool(iface.mapCanvas())
        iface.mapCanvas().setMapTool(self.point_tool)




        self.point_tool.canvasClicked[float,float].connect(self.getPointsandDigitise)

    # the one custom slot function needs to accept the QgsPointXY the signal emits
    def getPointsandDigitise(self,x,y):
        QApplication.setOverrideCursor(Qt.WaitCursor)
        QApplication.processEvents()
        print("Cursor Command Sent")
        time.sleep(0.1)

        vals = (x,y)
        print("printing: ",vals)
        imageName = self.dlg.fileDisplay.text()


        # outDir = imageName.replace(filename,'')


        print(imageName)

        filename = imageName.split('/')[-1]
        workspacePath = imageName.replace(filename, '')
        workspace = workspacePath
        workspace = '{0}Workspace/'.format(workspace)
        outDir = imageName.replace(filename, '')
        imageName=imageName.replace('.tif','_LAB.tif')
        print(imageName)
        neighbourhood = int(self.dlg.nbhood.text())
        threshold = int(self.dlg.thresh.text())
        print("Vector Resume")
        if self.dlg.fileShp.text() == '':

            saveFile = self.dlg.outVec.text()
            saveFile = outDir + saveFile + '.shp'
        else:
            saveFile = self.dlg.fileShp.text()
            print("Resuming")

        print(self.dlg.fileShp.text())
        print(saveFile)
        filename = imageName.split('/')[-1]




        scratchPath = imageName.replace(filename, '')
        workspacePath = imageName.replace(filename, '')
        workspace = workspacePath
        workspace = '{0}Workspace/'.format(workspace)

        imageName = workspace + filename

        print(imageName)

        if os.path.isdir(workspace) == False:
            os.mkdir(workspace)



        scratch = scratchPath
        scratch = '{0}tmp/'.format(scratch)



        if os.path.isdir(scratch) == False:

            os.mkdir(scratch)



        print(imageName)
        print(neighbourhood)
        print(threshold)
        print("Save File")
        print(saveFile)
        print(scratch)

        #### Create Blank Shapefile ####

        temp = QgsVectorLayer("polygon?crs=epsg:{0}".format(espgCode), "Data", "memory")
        newLayer = QgsVectorFileWriter.writeAsVectorFormat(temp,saveFile,'System', QgsCoordinateReferenceSystem(espgCode),'ESRI Shapefile', bool(True))
        temp = None

        # processes(imageName, vals, neighbourhood, threshold,saveFile,scratch,workspace,espgCode)

        location = vals
        outVec = saveFile


        print("Processing...")
        print(outVec)
        kxyMap = location
        file = imageName
        # print(file)
        src = gdal.Open(file)
        geoTrans = src.GetGeoTransform()
        src = None
        kxy = world2Pixel(geoTrans, kxyMap[0], kxyMap[1])
        # print(kxy)
        pxlNeighbourhood = int(neighbourhood / geoTrans[1])
        if pxlNeighbourhood > kxy[1]:
            print("Will Fall Edge..")
            for i in range(1, neighbourhood + 1):
                value = int(i / geoTrans[1])
                if value < kxy[1]:
                    pxlNeighbourhood = value
        # print(pxlNeighbourhood)
        originTop = (kxy[1] - pxlNeighbourhood)
        # print(originTop)
        originLeft = kxy[0] - pxlNeighbourhood
        rasterorigin = pixel2World(geoTrans, originLeft, originTop)
        src = None
        bands = []
        for x in range(1, 4):
            ds = gdal.Open(file)
            bandArray = np.array(ds.GetRasterBand(x).ReadAsArray())
            bands.append(bandArray)
            ds = None

        color_image = np.stack(bands, axis=2)

        # color_image = getLab(color_image)

        candiatePixels = GenerateNeighbourhood(color_image, pxlNeighbourhood, kxy)

        # candiatePixels = getLab(candiatePixels)

        # print(candiatePixels.shape)
        # print(pxlNeighbourhood)
        candiatePixelsLen = len(candiatePixels[0])
        spatialCentre = candiatePixelsLen / 2

        #### There is now a centroid pixel kxy and a neghbourhood of pixels around the centroid from whcih candiates will be selected ####

        #### There will now be a spatial and spectral distance calculation made and a total distance calculation found ####

        #### plot k centroid in 3 dimensional colour space ####

        kCentroidColour = getRGB(kxy[1], kxy[0], color_image)

        colorDist = np.empty_like(candiatePixels)
        colorDist = colorDist[:, :, 0]
        spatialDist = np.empty_like(candiatePixels)
        spatialDist = spatialDist[:, :, 0]

        DistMap = np.empty_like(candiatePixels)
        DistMap = DistMap[:, :, 0]

        spatialDist = np.indices(spatialDist.shape)
        coGrid = np.stack(spatialDist)
        yCo = coGrid[0, :, :]
        xCo = coGrid[1, :, :]
        spatialMap = np.empty_like(candiatePixels)
        spatialMap = spatialMap[:, :, 0]
        var1 = np.subtract(spatialCentre, xCo)
        var2 = np.subtract(spatialCentre, yCo)
        power1 = np.power(var1, 2)
        power2 = np.power(var2, 2)
        length = np.add(power1, power2)
        spatialDist = np.sqrt(length)

        candiatePixelsRed = candiatePixels[:, :, 0]

        var1 = np.subtract(kCentroidColour[0], candiatePixels[:, :, 0])

        var2 = np.subtract(kCentroidColour[1], candiatePixels[:, :, 1])
        var3 = np.subtract(kCentroidColour[2], candiatePixels[:, :, 2])
        #### I now have 2 distances which can be added together to generate a total image where spectral distance or spatial distance can be weighted ####
        power1 = np.power(var1, 2)
        power2 = np.power(var2, 2)
        power3 = np.power(var3, 2)

        length = np.add(power1, np.add(power2, power3))

        colorDist = np.sqrt(length)

        totalDistanceGrid = np.add(np.sqrt(spatialDist), colorDist)
        # totalDistanceGrid = colorDist

        binaryGrid = np.where(totalDistanceGrid > threshold, np.nan, 1)

        outRast = '{0}TempRast.tif'.format(scratch)
        tmpVec = '{0}TempVec.shp'.format(scratch)

        src = gdal.Open(file)
        # print(src)
        geoTrans = src.GetGeoTransform()
        rtnX = geoTrans[1]
        rtnY = geoTrans[5]
        src = None
        array2raster(outRast, rasterorigin, rtnX, rtnY, binaryGrid,espgCode)

        rastLayer = QgsRasterLayer(outRast)

        provider = rastLayer.dataProvider()

        provider.setNoDataValue(1, 0)

        rastLayer.triggerRepaint()

        xmin = location[0] - 1
        xmax = location[0] + 1

        ymin = location[1] - 1
        ymax = location[1] + 1

        tL = QgsPointXY(xmin, ymin)
        bR = QgsPointXY(xmax, ymax)

        rec = QgsRectangle(tL, bR)

        processing.run("gdal:polygonize", {'INPUT': rastLayer, 'BAND': 1, 'FIELD': 'DN', 'EIGHT_CONNECTEDNESS': False,
                                           'OUTPUT': tmpVec})

        processingVec = tmpVec

        processingVecInt = tmpVec.replace('.shp', '_int.shp')

        layer = QgsVectorLayer(tmpVec, "tmp Layer", 'ogr')

        with edit(layer):
            # build a request to filter the features based on an attribute
            request = QgsFeatureRequest().setFilterExpression('"DN" != 1')

            # we don't need attributes or geometry, skip them to minimize overhead.
            # these lines are not strictly required but improve performance
            request.setSubsetOfAttributes([])
            request.setFlags(QgsFeatureRequest.NoGeometry)

            # loop over the features and delete
            for f in layer.getFeatures(request):
                layer.deleteFeature(f.id())

        # QgsProject.instance().addMapLayer(layer)s
        provider = layer.dataProvider()

        spIndex = QgsSpatialIndex()  # create spatial index object

        feat = QgsFeature()
        fit = provider.getFeatures()  # gets all features in layer

        # insert features to index
        while fit.nextFeature(feat):
            spIndex.insertFeature(feat)

        pt = QgsPointXY(location[0], location[1])

        # QgsSpatialIndex.nearestNeighbor (QgsPoint point, int neighbors)
        nearestIds = spIndex.intersects(rec)  # we need only one neighbour

        featureId = nearestIds[0]
        fit2 = layer.getFeatures(QgsFeatureRequest().setFilterFid(featureId))
        print(fit2)
        ftr = QgsFeature()
        print(ftr)

        layer.select(featureId)

        print("Write Vector")
        print("ESPG Code: {0}".format(espgCode))

        QgsVectorFileWriter.writeAsVectorFormat(layer, processingVecInt, 'System',
                                                QgsCoordinateReferenceSystem(espgCode),
                                                'ESRI Shapefile', bool(True))

        # tLayer = QgsVectorLayer(processingVecInt)
        # QgsProject.instance().addMapLayer(tLayer)
        #

        tLayer = QgsVectorLayer(processingVecInt)
        processingVecIntBuff = processingVecInt.replace('.shp', '_Buff.shp')

        if self.dlg.trainingData.isChecked() == True:
            processing.run("native:buffer",
                           {'INPUT': tLayer, 'DISTANCE': -0.05,
                            'SEGMENTS': 5, 'END_CAP_STYLE': 0, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'DISSOLVE': True,
                            'OUTPUT': processingVecIntBuff})


        else:
            processing.run("native:buffer",
                           {'INPUT': tLayer, 'DISTANCE': 0.5,
                            'SEGMENTS': 5, 'END_CAP_STYLE': 0, 'JOIN_STYLE': 0, 'MITER_LIMIT': 2, 'DISSOLVE': True,
                            'OUTPUT': processingVecIntBuff})

        # reply = QMessageBox.question(self.iface.mainWindow(), 'Continue?',
        #                              'Do you want to digitise this feature?', QMessageBox.Yes, QMessageBox.No)

        print("Write Merged Vector")
        print("ESPG Code: {0}".format(espgCode))
        print('EPSG: {0}'.format(espgCode))
        processing.run("native:mergevectorlayers",
                       {'LAYERS': [processingVecIntBuff, outVec],
                        'CRS': QgsCoordinateReferenceSystem('EPSG: {0}'.format(espgCode)),
                        'OUTPUT': outVec})

        layer = None
        layer = QgsVectorLayer(outVec)
        outVecJS = outVec.replace(".shp", "")
        QgsVectorFileWriter.writeAsVectorFormat(layer, outVecJS, "utf-8", driverName="GeoJSON")

        layers = iface.mapCanvas().layers()
        activeLayer = iface.activeLayer()
        if activeLayer.type() == QgsMapLayer.VectorLayer:
            QgsProject.instance().removeMapLayers([activeLayer.id()])

        vLayer = QgsVectorLayer(outVec)
        vLayer.renderer().symbol().setColor(QColor("blue"))
        vLayer.triggerRepaint()
        QgsProject.instance().addMapLayer(vLayer)

        shutil.rmtree(scratch)

        print("Complete")

        QApplication.restoreOverrideCursor()
        QApplication.processEvents()


        iface.messageBar().pushMessage("Region Grower Plugin", "Process Successful", level=Qgis.Success,
                                       duration=1)

        # iface.mapCanvas().setMapTool(self.point_tool)

    def pause(self):

        self.dlg.start.setEnabled(True)
        self.dlg.resume.setEnabled(True)
        self.dlg.fileDisplay.setText('')
        self.dlg.nbhood.setText('')
        self.dlg.thresh.setText('')
        self.dlg.outVec.setText('')

        iface.actionPan().trigger()

        self.dlg.close()



